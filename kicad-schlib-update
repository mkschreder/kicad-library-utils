#!/usr/bin/env python

import argparse
from schlib import *
from suds.client import Client
import time
import sys

keyfile = os.path.dirname(os.path.realpath(__file__)) +"/mouser-key.txt";

with open(keyfile, 'r') as keyfile:
	mouser_key = keyfile.read().replace('\n', '');

client = Client("https://api.mouser.com/service/searchapi.asmx?WSDL")

header = client.factory.create("ns0:MouserHeader")
header.AccountInfo.PartnerID = mouser_key
client.set_options(soapheaders=header);

parser = argparse.ArgumentParser(description='Check KiCad project library for missing part numbers')
parser.add_argument('libfiles', nargs='+')
parser.add_argument('--update-all', help='Update all components regardless of fields', action='store_true')
parser.add_argument('--dump', help='Dump all component information', action='store_true')
parser.add_argument('--index', help='Dump components for index', action='store_true')
args = parser.parse_args();

if args.dump:
	print("Component;Availability;Description;Lifecycle;Price;Footprint");

for libfile in args.libfiles:
	lib = SchLib(libfile);
	for i, component in enumerate(lib.components):
		mpn = component.field("MPN")
		if args.dump or args.index:
			try:
				sys.stdout.write("%s;" % (component.name));
				sys.stdout.write("%s;" % component.fields[2]["name"]);
				if args.dump:
					for field in ["MPN", "Availability", "Description", "LifeCycle", "Price"]:
						if(component.field(field)):
							sys.stdout.write("%s;" % component.field(field)["name"])
						else:
							sys.stdout.write("-;");
				elif args.index:
					for field in ["MPN", "Description"]:
						if(component.field(field)):
							sys.stdout.write("%s;" % component.field(field)["name"])
						else:
							sys.stdout.write("-;");
				sys.stdout.write("\n");
			except Exception as e:
				print("Error %s: %s" % (component.name, str(e)));
				pass
			continue

		if mpn and not mpn["name"].startswith("~"):
			if mpn["visibility"] == 'V':
				mpn["visibility"] = 'I';
			if not mpn["name"].startswith("#") and (not component.field("Vendor") or not component.field("Availability") or not component.field("Description") or not component.field("LifeCycle") or not component.field("Price") or args.update_all):
				try:
					time.sleep(2); # up to 30 calls per minute
					res = client.service.SearchByPartNumber(mpn["name"])
				except:
					break
				if(len(res.Parts) == 0):
					print("Component %s: Not found online!" % component.name);
				else:
					part = res.Parts[0][0];
					component.addField({"fieldname": "Availability", "name": part.Availability if hasattr(part, "Availability") else "Not Available"});
					component.addField({"fieldname": "Description", "name": (part.Description or "").replace("\"", "")});
					component.addField({"fieldname": "LifeCycle", "name": part.LifecycleStatus or "OK"});
					component.addField({"fieldname": "Vendor", "name": "Mouser"});
					#component.addField({"fieldname": "Datasheet", "name": part.DataSheetUrl or ""});
					component.fields[3]["name"] = part.DataSheetUrl or "";
					component.addField({"fieldname": "Price", "name": part.PriceBreaks[0][0].Price.encode("ascii", "ignore").replace(",", ".") + " " + part.PriceBreaks[0][0].Currency if len(part.PriceBreaks) > 0 else "Not Available"});
					print("[%d/%d]: %s, Availability: %s, Description: %s, Lifecycle: %s, Price: %s" % (i, len(lib.components), component.name, part.Availability if hasattr(part, "Availability") else "Not Available", part.Description, part.LifecycleStatus, part.PriceBreaks[0][0].Price if len(part.PriceBreaks) > 0 else "Not Available"));
					#print res
		else:
			continue;
	if not args.dump and not args.index:
		lib.save();
